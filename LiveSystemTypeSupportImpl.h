/* -*- C++ -*- */
/* Generated by /home/sanjayvnair/Sanjay/CHREC/OpenDDS-3.9/bin/opendds_idl version 3.9 (ACE version 6.2a_p10) running on input file LiveSystem.idl */
#ifndef OPENDDS_IDL_GENERATED_LIVESYSTEMTYPESUPPORTIMPL_H_ZL3WIK
#define OPENDDS_IDL_GENERATED_LIVESYSTEMTYPESUPPORTIMPL_H_ZL3WIK
#include "LiveSystemC.h"
#include "dds/DCPS/Definitions.h"
#include "LiveSystemTypeSupportC.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl_T.h"
#include "orbsvcs/TimeBaseC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: TimeBase */



/* Begin TYPEDEF: TimeT */


/* End TYPEDEF: TimeT */


/* Begin TYPEDEF: InaccuracyT */


/* End TYPEDEF: InaccuracyT */


/* Begin TYPEDEF: TdfT */


/* End TYPEDEF: TdfT */


/* Begin STRUCT: UtcT */


/* End STRUCT: UtcT */


/* Begin STRUCT: IntervalT */


/* End STRUCT: IntervalT */

/* End MODULE: TimeBase */


/* Begin MODULE: LiveSystem */



/* Begin STRUCT: StringMsg */

namespace OpenDDS { namespace DCPS {

void gen_find_size(const LiveSystem::StringMsg& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const LiveSystem::StringMsg& stru);

bool operator>>(Serializer& strm, LiveSystem::StringMsg& stru);

bool gen_is_bounded_size(const LiveSystem::StringMsg&);

size_t gen_max_marshaled_size(const LiveSystem::StringMsg& stru, bool align);

bool gen_is_bounded_size(KeyOnly<const LiveSystem::StringMsg>);

size_t gen_max_marshaled_size(KeyOnly<const LiveSystem::StringMsg> stru, bool align);

void gen_find_size(KeyOnly<const LiveSystem::StringMsg> stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, KeyOnly<const LiveSystem::StringMsg> stru);

bool operator>>(Serializer& strm, KeyOnly<LiveSystem::StringMsg> stru);

}  }

namespace OpenDDS { namespace DCPS {

bool gen_has_key(const LiveSystem::StringMsg&);

}  }

namespace LiveSystem {
namespace OpenDDSGenerated {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct  StringMsg_KeyLessThan {
  bool operator()(const LiveSystem::StringMsg& v1, const LiveSystem::StringMsg& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    ACE_UNUSED_ARG(v1);
    ACE_UNUSED_ARG(v2);
    // with no DCPS_DATA_KEYs, return false
    // to allow use of map with just one entry
    return false;
  }
};
}
}
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<LiveSystem::StringMsg> {
  typedef LiveSystem::StringMsg MessageType;
  typedef LiveSystem::StringMsgSeq MessageSequenceType;
  typedef LiveSystem::StringMsgTypeSupport TypeSupportType;
  typedef LiveSystem::StringMsgDataWriter DataWriterType;
  typedef LiveSystem::StringMsgDataReader DataReaderType;
  typedef LiveSystem::OpenDDSGenerated::StringMsg_KeyLessThan LessThanType;

  inline static const char* type_name () { return "LiveSystem::StringMsg"; }
  inline static bool gen_has_key (const MessageType& x) { return ::OpenDDS::DCPS::gen_has_key(x); }

  inline static bool gen_is_bounded_size (const MessageType& x) { return ::OpenDDS::DCPS::gen_is_bounded_size(x); }
  inline static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  inline static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  inline static bool gen_is_bounded_size (const OpenDDS::DCPS::KeyOnly<const MessageType>& x) { return ::OpenDDS::DCPS::gen_is_bounded_size(x); }
  inline static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  inline static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }

namespace LiveSystem {
  typedef OpenDDS::DCPS::DataWriterImpl_T<LiveSystem::StringMsg> StringMsgDataWriterImpl;
  typedef OpenDDS::DCPS::DataReaderImpl_T<LiveSystem::StringMsg> StringMsgDataReaderImpl;
  typedef OpenDDS::DCPS::TypeSupportImpl_T<LiveSystem::StringMsg> StringMsgTypeSupportImpl;
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct<LiveSystem::StringMsg>();
void gen_skip_over(Serializer& ser, LiveSystem::StringMsg*);

}  }

#endif

/* End STRUCT: StringMsg */

/* End MODULE: LiveSystem */
#endif /* OPENDDS_IDL_GENERATED_LIVESYSTEMTYPESUPPORTIMPL_H_ZL3WIK */
