/* Generated by /home/sanjayvnair/Sanjay/CHREC/OpenDDS-3.9/bin/opendds_idl version 3.9 (ACE version 6.2a_p10) running on input file LiveSystem.idl */
#include "LiveSystemTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: TimeBase */



/* Begin TYPEDEF: TimeT */


/* End TYPEDEF: TimeT */


/* Begin TYPEDEF: InaccuracyT */


/* End TYPEDEF: InaccuracyT */


/* Begin TYPEDEF: TdfT */


/* End TYPEDEF: TdfT */


/* Begin STRUCT: UtcT */


/* End STRUCT: UtcT */


/* Begin STRUCT: IntervalT */


/* End STRUCT: IntervalT */

/* End MODULE: TimeBase */


/* Begin MODULE: LiveSystem */



/* Begin STRUCT: StringMsg */

namespace OpenDDS { namespace DCPS {

void gen_find_size(const LiveSystem::StringMsg& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  size += gen_max_marshaled_size(ACE_OutputCDR::from_boolean(stru.type));
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.dr);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.id);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.cid);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.msg.in()) + 1;
}

bool operator<<(Serializer& strm, const LiveSystem::StringMsg& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << ACE_OutputCDR::from_boolean(stru.type))
    && (strm << stru.dr)
    && (strm << stru.id)
    && (strm << stru.cid)
    && (strm << stru.msg.in());
}

bool operator>>(Serializer& strm, LiveSystem::StringMsg& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> ACE_InputCDR::to_boolean(stru.type))
    && (strm >> stru.dr)
    && (strm >> stru.id)
    && (strm >> stru.cid)
    && (strm >> stru.msg.out());
}

bool gen_is_bounded_size(const LiveSystem::StringMsg&)
{
  return false;
}

size_t gen_max_marshaled_size(const LiveSystem::StringMsg& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

bool gen_is_bounded_size(KeyOnly<const LiveSystem::StringMsg>)
{
  return true;
}

size_t gen_max_marshaled_size(KeyOnly<const LiveSystem::StringMsg> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const LiveSystem::StringMsg> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const LiveSystem::StringMsg> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<LiveSystem::StringMsg> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }

namespace OpenDDS { namespace DCPS {

bool gen_has_key(const LiveSystem::StringMsg&)
{
  return false;
}

}  }

namespace LiveSystem {
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<LiveSystem::StringMsg> : MetaStruct {
  typedef LiveSystem::StringMsg T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const LiveSystem::StringMsg& typed = *static_cast<const LiveSystem::StringMsg*>(stru);
    if (std::strcmp(field, "type") == 0) {
      return typed.type;
    }
    if (std::strcmp(field, "dr") == 0) {
      return typed.dr;
    }
    if (std::strcmp(field, "id") == 0) {
      return typed.id;
    }
    if (std::strcmp(field, "cid") == 0) {
      return typed.cid;
    }
    if (std::strcmp(field, "msg") == 0) {
      return typed.msg.in();
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct LiveSystem::StringMsg)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "type") == 0) {
      ACE_CDR::Boolean val;
      if (!(ser >> ACE_InputCDR::to_boolean(val))) {
        throw std::runtime_error("Field 'type' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 1);
    }
    if (std::strcmp(field, "dr") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'dr' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'id' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "cid") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'cid' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 4);
    }
    if (std::strcmp(field, "msg") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'msg' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'msg' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct LiveSystem::StringMsg");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "type") == 0) {
      return make_field_cmp(&T::type, next);
    }
    if (std::strcmp(field, "dr") == 0) {
      return make_field_cmp(&T::dr, next);
    }
    if (std::strcmp(field, "id") == 0) {
      return make_field_cmp(&T::id, next);
    }
    if (std::strcmp(field, "cid") == 0) {
      return make_field_cmp(&T::cid, next);
    }
    if (std::strcmp(field, "msg") == 0) {
      return make_field_cmp(&T::msg, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct LiveSystem::StringMsg)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"type", "dr", "id", "cid", "msg", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "type") == 0) {
      return &static_cast<const T*>(stru)->type;
    }
    if (std::strcmp(field, "dr") == 0) {
      return &static_cast<const T*>(stru)->dr;
    }
    if (std::strcmp(field, "id") == 0) {
      return &static_cast<const T*>(stru)->id;
    }
    if (std::strcmp(field, "cid") == 0) {
      return &static_cast<const T*>(stru)->cid;
    }
    if (std::strcmp(field, "msg") == 0) {
      return &static_cast<const T*>(stru)->msg;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct LiveSystem::StringMsg)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "type") == 0) {
      static_cast<T*>(lhs)->type = *static_cast<const CORBA::Boolean*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "dr") == 0) {
      static_cast<T*>(lhs)->dr = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "id") == 0) {
      static_cast<T*>(lhs)->id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "cid") == 0) {
      static_cast<T*>(lhs)->cid = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "msg") == 0) {
      static_cast<T*>(lhs)->msg = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct LiveSystem::StringMsg)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "type") == 0) {
      return static_cast<const T*>(lhs)->type == static_cast<const T*>(rhs)->type;
    }
    if (std::strcmp(field, "dr") == 0) {
      return static_cast<const T*>(lhs)->dr == static_cast<const T*>(rhs)->dr;
    }
    if (std::strcmp(field, "id") == 0) {
      return static_cast<const T*>(lhs)->id == static_cast<const T*>(rhs)->id;
    }
    if (std::strcmp(field, "cid") == 0) {
      return static_cast<const T*>(lhs)->cid == static_cast<const T*>(rhs)->cid;
    }
    if (std::strcmp(field, "msg") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->msg.in(), static_cast<const T*>(rhs)->msg.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct LiveSystem::StringMsg)");
  }
};

template<>
const MetaStruct& getMetaStruct<LiveSystem::StringMsg>()
{
  static MetaStructImpl<LiveSystem::StringMsg> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, LiveSystem::StringMsg*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<LiveSystem::StringMsg>().getValue(ser, "");
}

}  }

#endif

/* End STRUCT: StringMsg */

/* End MODULE: LiveSystem */
